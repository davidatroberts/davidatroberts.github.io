<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Dave's Hacks</title>
<subtitle type="text">What it says on the tin</subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://community.dur.ac.uk/d.a.t.roberts/feed.xml" />
<link rel="alternate" type="text/html" href="http://community.dur.ac.uk/d.a.t.roberts" />
<updated>2016-01-06T17:35:56-05:00</updated>
<id>http://community.dur.ac.uk/d.a.t.roberts/</id>
<author>
  <name>David Roberts</name>
  <uri>http://community.dur.ac.uk/d.a.t.roberts/</uri>
  <email>d.a.t.robets@durham.ac.uk</email>
</author>


<entry>
  <title type="html"><![CDATA[OpenDingux 3D (slow edition)]]></title>
  <link rel="alternate" type="text/html" href="http://community.dur.ac.uk/d.a.t.roberts/articles/dingux3D" />
  <id>http://community.dur.ac.uk/d.a.t.roberts/articles/dingux3D</id>
  <published>2015-07-29T00:00:00-04:00</published>
  <updated>2015-07-29T00:00:00-04:00</updated>
  <author>
    <name>David Roberts</name>
    <uri>http://community.dur.ac.uk/d.a.t.roberts</uri>
    <email>d.a.t.robets@durham.ac.uk</email>
  </author>
  <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Looking back on these posts, I should probably try to update them a little more frequently. I think I might stick to relatively short posts, that way I might actually get some more out!&lt;/p&gt;

&lt;p&gt;Anyway, in the last post I described how I set up a development environment that was basically Xubuntu running in a virtual machine, and then SSHing into that from OS X. Well I’ve been putting that to use building a simple little software renderer for the Dingoo. The main motivation for this is that as part of my PhD I’ve created raycasting software for volume rendering and this has turned into quite a sophisticated and dare I say it useful program. But, one thing I’ve realised is that although I’m adept with raycasting I know very little about implementing standard polygon rendering (except for understanding the general concept). So I thought let’s try and write one for the Dingoo.&lt;/p&gt;

&lt;h3 id=&quot;so-far&quot;&gt;So far&lt;/h3&gt;
&lt;p&gt;A few quick notes about the Dingoo that make this project a little interesting, it has no GPU so everything has to be done in software and it has no FPU so floating point operations are slow, very slow. 
The video you see below is a 3D cube being software rendered on the Dingoo. Yes it is slow, I need to put an FPS counter on but I’m not betting on greater than 1 FPS. This is mainly because at the moment it’s still using floating point calculations in the matrices and vectors. There’s also no back-face culling so half of what it’s rendering it doesn’t need to. There is however a working depth-buffer, again at the moment this is using floats, I know, that’s next on the list. The colours look a lot more washed out than what they actually are, blame me filming it late at night. &lt;/p&gt;

&lt;p&gt;I’ll get around to putting the code on github soon, I think next on the list is sorting out the visual glitches around the top and sides of the cube. Then on to back-face culling and then probably using fixed-point arithmetic, that should speed it up considerably.&lt;/p&gt;

&lt;video width=&quot;480&quot; height=&quot;360&quot; controls=&quot;&quot;&gt;
	&lt;source src=&quot;http://community.dur.ac.uk/d.a.t.roberts/images/VID_20150728_220226.mp4&quot; /&gt;
	Unfortunately your browser does not support HTML5 video
&lt;/video&gt;

  &lt;p&gt;&lt;a href=&quot;http://community.dur.ac.uk/d.a.t.roberts/articles/dingux3D&quot;&gt;OpenDingux 3D (slow edition)&lt;/a&gt; was originally published by David Roberts at &lt;a href=&quot;http://community.dur.ac.uk/d.a.t.roberts&quot;&gt;Dave's Hacks&lt;/a&gt; on July 29, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[OpenDingux Dev Environment for OS X (sort of)]]></title>
  <link rel="alternate" type="text/html" href="http://community.dur.ac.uk/d.a.t.roberts/articles/opendingux" />
  <id>http://community.dur.ac.uk/d.a.t.roberts/articles/opendingux</id>
  <published>2014-10-11T00:00:00-04:00</published>
  <updated>2014-10-11T00:00:00-04:00</updated>
  <author>
    <name>David Roberts</name>
    <uri>http://community.dur.ac.uk/d.a.t.roberts</uri>
    <email>d.a.t.robets@durham.ac.uk</email>
  </author>
  <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;A couple of years ago I picked up a Dingoo A320, it was awesome especially for commuting back and forth to Sky where I was working at the time. Anyway things change and inevitably it ended up in the back of a draw. Having moved house again, I found it, though there were a few scratches on the screen that were quickly taken care with good ol’Brasso. I decided that it was time for me to make something for it and learn SDL during the process. So this post is a quick tutorial to setting up GCC to compile on OS X. (I say OS X, I’m actually running the toolchain under a virtual machine, I’ll explain as I go on)&lt;/p&gt;

&lt;p&gt;This tutorial does assume that you’ve got OpenDingux installed and running on your Dingoo, the latest version can be found &lt;a href=&quot;http://www.treewalker.org/opendingux/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-toolchain&quot;&gt;The Toolchain&lt;/h3&gt;
&lt;p&gt;There is a toolchain that is provided for OpenDingux that includes GCC, SDL and a number of other useful libraries that can be found at the following &lt;a href=&quot;http://www.treewalker.org/opendingux/&quot;&gt;link&lt;/a&gt;. You’ll notice that it’s for Linux and it’s 32-bit only. Now it is possible to build a cross-compiler for OS X that can be used to build directly, however I’m going to show you a different (and in my view easier method) using a virtual machine.&lt;/p&gt;

&lt;h3 id=&quot;installing-the-virtual-machine&quot;&gt;Installing the Virtual Machine&lt;/h3&gt;
&lt;p&gt;To run the virtual machine that we’ll install the toolchain under I’m using Virtual Box. You could of course use Parallels or VMware, but the following instructions will assume you’re using Virtual Box. &lt;/p&gt;

&lt;p&gt;First things first, install Virtual Box available &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;here&lt;/a&gt;. Now we need to install a 32-bit Linux OS, personally I’m using Xubuntu. Make sure you download the 32-bit version.&lt;/p&gt;

&lt;p&gt;After you’ve downloaded Xubuntu, run Virtual Box and create a new virtual machine, call it Xubuntu32 and for type select Linux, and for version choose Ubuntu 32-bit. Click ‘Continue’ and select the amount of RAM to use, I’ve just set it to 512MB, just enough. Next create a virtual hard drive with whatever size you need. After you’ve created the virtual machine, run it and follow the ‘First Start Wizard’. Choose the Xubuntu iso you downloaded earlier, then just follow the Xubuntu installation instructions.  &lt;/p&gt;

&lt;h3 id=&quot;installing-the-toolchain&quot;&gt;Installing the Toolchain&lt;/h3&gt;
&lt;p&gt;Once Xubuntu has been installed and it’s running, open Firefox, it should already be installed, then download the toolchain from the link previously mentioned in this post. After it’s been downloaded copy it to ‘/opt/’ and then add ‘/opt/opendingux-toolchain/usr/bin’ to your PATH.&lt;/p&gt;

&lt;p&gt;That’s pretty much it for installing the toolchain, and if you want to use Xubuntu to develop the code you can just stop here. If you carry on reading I’ll tell you how to run Xubuntu headless and just access it with SSH.&lt;/p&gt;

&lt;h3 id=&quot;installing-ssh-server&quot;&gt;Installing SSH server&lt;/h3&gt;
&lt;p&gt;We’ll be running Xubuntu in headless mode and we’ll access it via SSH. To do this you’ll need to install an SSH server, so in Xubuntu open a terminal and type in ‘sudo apt-get install openssh-server’. &lt;/p&gt;

&lt;p&gt;Now to access the guest OS (Xubuntu) from the Host (OS X) we need to set up the Networks properly in Virtual Box. First we need to create a ‘Host-only Network’ so that the host and the guest can see each other. So, in the Virtual Box Manager go to Preferences, click the Network icon and then click on the ‘Host-only Networks’ tab. On the right-hand side there’ll be a little icon that looks like a network card with a plus symbol, click it. It’ll create a a new network with the name of ‘vboxnet0’.&lt;/p&gt;

&lt;p&gt;Now we need to make Xubuntu use this network. Do this by shutting down Xubuntu then in the Virtual Box Manager make sure Xubuntu is highlighted in the left-hand side where all the virtual machines are listed and then click on Settings. Next, click on the Network icon at the top. There should be a number of adapter tabs, click the second one. Select the checkbox labeled ‘Enable Network Adapter’. On the ‘Attached to’ dropdownbox select ‘Host-only Adapter’ and in the ‘Name’ dropdownbox below select ‘vboxnet0’.&lt;/p&gt;

&lt;p&gt;This is a good time to check that we can SSH into Xubuntu. Start the SSH server in Xubuntu by entering a terminal and typing ‘sudo service ssh start’. We then need the IP address of the guest OS, in the terminal type in ‘ifconfig’ and copy the IP address, for me it was ‘192.168.56.101’. In OS X open Terminal and enter ‘ssh user@192.168.56.101’ where ‘user’ is the username you chose when you installed Xubuntu, then enter your password. If all goes well you’ve now successfully got access to Xubuntu.&lt;/p&gt;

&lt;h3 id=&quot;running-xubuntu-headless&quot;&gt;Running Xubuntu Headless&lt;/h3&gt;
&lt;p&gt;The one thing left to do is to run Xubuntu headless, this means that we don’t have to have another window open. We’ll have to install the Virtual Box Extension Packs, I suggest you follow the instructions on this &lt;a href=&quot;http://www.thomas-krenn.com/en/wiki/Headless_Mode_for_Virtual_Machines_of_VirtualBox#Installing_Extension_Packs&quot;&gt;page&lt;/a&gt;. Just below the instructions for installation are instructions for running and connecting to the virtual machine (instead of ‘ubuntu-server’, use ‘xubuntu32’).&lt;/p&gt;

&lt;p&gt;You’ve now got a Xubuntu virtual machine running headless with the OpenDingux toolchain installed!&lt;/p&gt;

&lt;p&gt;For the next post I’ll go through a simple hello world with SDL and uploading it onto the Dingoo&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://community.dur.ac.uk/d.a.t.roberts/articles/opendingux&quot;&gt;OpenDingux Dev Environment for OS X (sort of)&lt;/a&gt; was originally published by David Roberts at &lt;a href=&quot;http://community.dur.ac.uk/d.a.t.roberts&quot;&gt;Dave's Hacks&lt;/a&gt; on October 11, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Chumby and Go]]></title>
  <link rel="alternate" type="text/html" href="http://community.dur.ac.uk/d.a.t.roberts/articles/chumby-go" />
  <id>http://community.dur.ac.uk/d.a.t.roberts/articles/chumby-go</id>
  <updated>2013-11-17T00:00:00-00:00</updated>
  <published>2013-11-17T00:00:00-05:00</published>
  
  <author>
    <name>David Roberts</name>
    <uri>http://community.dur.ac.uk/d.a.t.roberts</uri>
    <email>d.a.t.robets@durham.ac.uk</email>
  </author>
  <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;A number of years ago I purchased a Chumby One, basically a fancy alarm clock running linux. I’ve played with a few different languages for it but haven’t really done much with it lately. I’ve also been using a bit of Go recently and thought it might be fun to get Go running on the Chumby One, this has actually proven to be remarkably easy thanks to Go already coming with a number of compilers for different architectures. In this post I’ll run through what’s required to run a Go program on the Chumby One, note that I’m using OS X however the steps shouldn’t be too different for Linux.&lt;/p&gt;

&lt;h3 id=&quot;cross-compiling-go&quot;&gt;Cross Compiling Go&lt;/h3&gt;
&lt;p&gt;First things first, Go will need to be installed with the compilers for different architectures as well. The easiest way to do this is via Homebrew, a package manager for OS X. Information regarding how to install Homebrew can be found at this &lt;a href=&quot;http://brew.sh/&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once Homebrew is installed Go can be installed with the most common compilers for other architectures.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install go --cross-compile-all&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The Chumby one device itself runs linux with an ARM926EJ-S processor, for our purposes it is important to know that this runs the v5 ARM architecture. Say that we have a simple HelloWorld program in go as below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; 	&lt;span class=&quot;s&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt; 	&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then to cross-compile for the Chumby One on OS X we can just compile the code as such:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;GOARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;arm &lt;span class=&quot;nv&quot;&gt;GOOS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;linux &lt;span class=&quot;nv&quot;&gt;GOARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; go build main.go&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s all that’s needed to build go programs for the Chumby One on OS X. In the next section I’ll go through how that can be put onto the Chumby. &lt;/p&gt;

&lt;h3 id=&quot;running-the-go-program-on-the-chumby&quot;&gt;Running the Go program on the Chumby&lt;/h3&gt;
&lt;p&gt;The next stage is to move the compiled code onto the Chumby. Luckily a few years ago I’d produced a post on how to run the Pure-FTPd ftp server on the Chumby One that can be found &lt;a href=&quot;http://davidrobertsblog.wordpress.com/2011/04/17/chumby-ftp/&quot;&gt;here&lt;/a&gt;. If you’re following this then I’d advise to follow the post to install the ftp-server, then on OS X you can just connect to the ftp-server with your favourite ftp client, my preference is Cyberduck. &lt;/p&gt;

&lt;p&gt;Now we have to connect to the Chumby to run the program, we’ll do this by connecting via SSH. To start the Chumby daemon, click on the top button of the Chumby, this will open the control panel. Once the control panel is up click the &lt;em&gt;Settings&lt;/em&gt; button on the lower right hand corner. On the Settings panel click on the &lt;em&gt;Chumby Info&lt;/em&gt; button, this will bring up some more specific details about the network connection. On this page there is a Pi symbol in the very upper right hand corner, click this. This will bring up a hidden panel, on this panel there is a button labeled &lt;em&gt;SSHD&lt;/em&gt;, this will start the SSH daemon on the Chumby.&lt;/p&gt;

&lt;p&gt;Now on OS X open Terminal and type in:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh 192.168.2. -l root&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where the IP address is the IP address of the Chumby. Then cd into the directory where you placed the compiled code. Then just type ./main. If all goes well “Hello World” will be printed on the terminal. &lt;/p&gt;

&lt;p&gt;Next I’ll go through how to access the frame buffer, touch screen and other hardware devices on the Chumby via go.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://community.dur.ac.uk/d.a.t.roberts/articles/chumby-go&quot;&gt;Chumby and Go&lt;/a&gt; was originally published by David Roberts at &lt;a href=&quot;http://community.dur.ac.uk/d.a.t.roberts&quot;&gt;Dave's Hacks&lt;/a&gt; on November 17, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[A Ghost, an Arduino and Go]]></title>
  <link rel="alternate" type="text/html" href="http://community.dur.ac.uk/d.a.t.roberts/articles/ghost-arduino-go" />
  <id>http://community.dur.ac.uk/d.a.t.roberts/articles/ghost-arduino-go</id>
  <updated>2013-09-17T00:00:00-00:00</updated>
  <published>2013-11-16T00:00:00-05:00</published>
  
  <author>
    <name>David Roberts</name>
    <uri>http://community.dur.ac.uk/d.a.t.roberts</uri>
    <email>d.a.t.robets@durham.ac.uk</email>
  </author>
  <content type="html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Going through Newcastle the other month, I out of habit went to visit Forbidden Planet, for comics but mainly for the toys and stuff. &lt;/p&gt;

&lt;p class=&quot;image-pull-right&quot;&gt;&lt;img src=&quot;http://community.dur.ac.uk/d.a.t.roberts/images/IMG_20130917_233156.jpg&quot; alt=&quot;Pacman Ghost&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I came across what is possible one of the best lamps I have seen, I am of course talking about the LED Pacman ghost lamp that can be seen on the right. Now what makes it particularly interesting is that it comes with an infra-red (IR) remote control that can be used to change the colour as well as set a number of effects such as a fading and strobe effects. &lt;/p&gt;

&lt;h3 id=&quot;checking-a-few-things&quot;&gt;Checking a few things&lt;/h3&gt;
&lt;p&gt;After playing around with it a for a little while I thought it would be interesting to see whether the system uses the standard IR frequency. What do I mean by standard, well most TV, music systems and a lot of other devices that can be controlled by IR devices send data over the IR LEDs at a specific frequency, 38kHz to be exact. After purchasing an IR receiver that was able to receive data at this frequency it was time to dig out the Arduino. &lt;/p&gt;

&lt;p&gt;Without knowing the exact format the IR remote control was using to send the data I couldn’t be sure of the individual codes or even if it was using the 38kHz frequency. After a bit of googling I found Ken Shirriff’s multi-protocol infrared remote library for the arduino &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Using the example code on his website that I’ve given below, I was able to see that the IR was using a known format and could view the individual hex codes for each of the different buttons on the remote. There are a few different formats that are used to send/receive IR codes, by default the code below will not give the format that’s being used. To find this edit the &lt;em&gt;IRemote.h&lt;/em&gt; file that can found in the IRremote folder where the Arduino library was installed and add the line &lt;em&gt;#define DEBUG&lt;/em&gt;, just above the line &lt;em&gt;class decode_results {&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;IRremote.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RECV_PIN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IRrecv&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;irrecv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RECV_PIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;decode_results&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;irrecv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enableIRIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Start the receiver&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;irrecv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;irrecv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Receive the next value&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From running through the code with the DEBUG flag it became apparent that it was using the NEC protocol. Now as a test I copied down one of the codes, 0xF720DF, in this case the HEX value that was sent out when the red colour was chosen and used the code below to test that it would work.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;IRremote.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IRsend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;irsend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;irsend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendNEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xF720DF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lo and behold the lamp turned red.&lt;/p&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;
&lt;p&gt;Having proven that it was possible to control the lamp via IR using the arduino, it was time to design the software to allow the lamp to be controlled via REST web services. I decided to use two main pieces of software, the first running on the Arduino that takes commands via serial regarding the colour and effect to use and then proceed to send these in the format the lamp expects. The second was a set a of RESTful web services written in go that receives the commands, interprets them and then sends them over serial to the arduino. &lt;/p&gt;

&lt;h4 id=&quot;arduino&quot;&gt;Arduino&lt;/h4&gt;
&lt;p&gt;The arduino code is relatively simple, there’s just a continuous loop that reads a byte from the serial. This byte is used as a command byte that controls the type of effect that we want to show. A switch case then just parses through the command bytes,
at the moment there are four types of commands that can be used. &lt;em&gt;Constant&lt;/em&gt;, &lt;em&gt;flash&lt;/em&gt;, &lt;em&gt;alt&lt;/em&gt; and finally &lt;em&gt;off&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;For the constant command the code waits for a second byte that defines the colour to use. This is then displayed on the lamp until another command is received. The flash again just takes a single byte as the colour, and alternates between showing the colour given and blank. In order to produce accurate timing I’m using this &lt;a href=&quot;https://github.com/JChristensen/Timer&quot;&gt;timer&lt;/a&gt; library. The alt command produces an effect similar to the alt command except that it takes two colours, and then alternatively flashes between two two colours. Off does what you might expect and switches the lamp off. The code for the arduino side can be found in its entirety &lt;a href=&quot;https://gist.github.com/biomood/7493332&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;restful-web-services&quot;&gt;RESTful web services&lt;/h4&gt;
&lt;p&gt;The go side is split into two parts, the first part handles the web services and the second part handles communication with the arduino via serial.&lt;/p&gt;

&lt;p&gt;In order to create the RESTful web services I’m using the &lt;a href=&quot;https://github.com/ant0ine/go-json-rest&quot;&gt;Go-Json-Rest&lt;/a&gt; library. An example of setting one of the handlers is below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ResourceHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SetRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/ghost&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PostCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code for the &lt;em&gt;PostCmd&lt;/em&gt; is then below, in a nutshell the function decodes the REST payload into JSON and then parses through the command contained in the JSON. The appropriate function is then called in the underlying &lt;em&gt;ghostlib&lt;/em&gt; library. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PostCmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DecodeJsonPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StatusBadRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;CONST&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Colour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;missing parameter&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ghostlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ConstantColour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Colour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;FLASH&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Colour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;missing parameter&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ghostlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FlashColour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Colour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ALT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Colour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ColourAlt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;missing parameters&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ghostlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AlternateColour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Colour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ColourAlt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ON&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ghostlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;On&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;OFF&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ghostlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;unknown command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Server Error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Data is sent to the arduino via serial and for this I’m using the goserial library available &lt;a href=&quot;https://github.com/tarm/goserial&quot;&gt;here&lt;/a&gt;. To open a connection to the arduino via serial using this library first we must set the string of the connection to make and speed, open the port and then when we’re ready to write to the port just call Write with the bytes to send.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/dev/tty.usbserial-A600agDn&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Baud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OpenPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;vals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;OFF&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That pretty much covers how to send data via serial to the arduino, the full code for go RESTful web services can be found &lt;a href=&quot;https://dl.dropboxusercontent.com/u/1995939/ArduinoIR.zip&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This covers part 1 of using web services to control the colour of a lamp with an arduino. In a next post I’ll go over the android application I’ve developed to remotely control the lamp as well as flash when a text message or phone call is made.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;

      &lt;p&gt;Available at: http://www.righto.com/2009/08/multi-protocol-infrared-remote-library.html &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://community.dur.ac.uk/d.a.t.roberts/articles/ghost-arduino-go&quot;&gt;A Ghost, an Arduino and Go&lt;/a&gt; was originally published by David Roberts at &lt;a href=&quot;http://community.dur.ac.uk/d.a.t.roberts&quot;&gt;Dave's Hacks&lt;/a&gt; on November 16, 2013.&lt;/p&gt;</content>
</entry>

</feed>